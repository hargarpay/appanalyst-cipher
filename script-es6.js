/** Cipher Application
*	Create a Cipher that encrypt and decrypt user input
*	Encrypt
*	Create an encrypt method that return multiple of 4 of the length of the inputted words
*	Decrypt
* 	Create a decrypt method that decrypt the encrypted value
*/
class Cipher{
	constructor(){
		this.alphabets = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M','N', "O", 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
		this.numbers = ['0','1','2','3','4','5','6','7','8','9'];
		//Convert the UpperCase value to lower case and concatenate the array to the alphabets value
		this.alphaNumberic = this.alphabets.concat(this.alphabets.map(letter => letter.toLowerCase())).concat(this.numbers);
	}

	encrypt(input = ''){
		//For each character it will produce the 6,5,4,3 left rotation characters

		//Check if the input is empty
		if(input === '') return 'You have not input any value';
		//Check if the value contained any special character
		if(/^[a-zA-Z0-9]*$/.test(input) === false) return 'Sorry, you can not use any special characters';
		//Convert the string words to array
		let arrInput = input.split('');
		//Produce the 4 characters for each of the element
		let encryptValue = arrInput.map(letter => {
			//Check if the chatter is an alphabet
			if(!letter.match(/[a-zA-Z0-9]/)) return letter;
			//Get the index of the letter
			let letterIndex = this.alphaNumberic.indexOf(letter);
			//left rotation 6
			let rot6letter = letterIndex - 6;
			//Check if the left rotation of 6 is within the index of alphaNumberic
			//if not Add the length of alphaNumberic to the left rotation of 6 index
			let newRot6letter = rot6letter >= 0 ? rot6letter : parseInt(rot6letter) + this.alphaLength();
			//left rotation 5
			let rot5letter = letterIndex - 5;
			//Check if the left rotation of 5 is within the index of alphaNumberic
			//if not Add the length of alphaNumberic to the left rotation of 5 index
			let newRot5letter = rot5letter >= 0 ? rot5letter : parseInt(rot5letter) + this.alphaLength();
			//left rotation 4
			let rot4letter = letterIndex - 4;
			//Check if the left rotation of 4 is within the index of alphaNumberic
			//if not Add the length of alphaNumberic to the left rotation of 4 index
			let newRot4letter = rot4letter >= 0 ? rot4letter : parseInt(rot4letter) + this.alphaLength();
			//left rotation 3
			let rot3letter = letterIndex - 3;
			//Check if the left rotation of 3 is within the index of alphaNumberic
			//if not Add the length of alphaNumberic to the left rotation of 3 index
			let newRot3letter = rot3letter >= 0 ? rot3letter : parseInt(rot3letter) + this.alphaLength();
			//return the four characters for the letter
			return this.alphaNumberic[newRot6letter]+this.alphaNumberic[newRot5letter]+this.alphaNumberic[newRot4letter]+this.alphaNumberic[newRot3letter];

		});

		return encryptValue.join('');

	}

	decrypt(input = ''){
		//Check if the input is empty
		if(input === '') return 'Sorry, you have not input any value';
		//Check if the the length of the input value is a multiple of 4
		if(input.length % 4 !== 0) return 'Sorry, the encrypt key was not generated by this application';
		//Split the array into 4 characters using regex
		let arr4Input = input.match(/.{4}/g);
		let decryptValue = arr4Input.map(letter => {
			//Split the characters into array
			let arrLetter = letter.split('');
			//right rotation 6
			let rot6letter = this.alphaNumberic.indexOf(arrLetter[0]) + 6;
			//Check if the right rotation of 6 is within the index of alphaNumberic
			//if not Subtract the length of alphaNumberic to the right rotation of 6 index
			let newRot6letter = rot6letter < this.alphaLength() ? rot6letter : parseInt(rot6letter) - this.alphaLength();
			//right rotation 5
			let rot5letter = this.alphaNumberic.indexOf(arrLetter[1]) + 5;
			//Check if the right rotation of 5 is within the index of alphaNumberic
			//if not Subtract the length of alphaNumberic to the right rotation of 5 index
			let newRot5letter = rot5letter < this.alphaLength() ? rot5letter : parseInt(rot5letter) - this.alphaLength();
			//right rotation 4
			let rot4letter = this.alphaNumberic.indexOf(arrLetter[2]) + 4;
			//Check if the right rotation of 4 is within the index of alphaNumberic
			//if not Subtract the length of alphaNumberic to the right rotation of 4 index
			let newRot4letter = rot4letter < this.alphaLength() ? rot4letter : parseInt(rot4letter) - this.alphaLength();
			//right rotation 3
			let rot3letter = this.alphaNumberic.indexOf(arrLetter[3]) + 3;
			//Check if the right rotation of 3 is within the index of alphaNumberic
			//if not Subtract the length of alphaNumberic to the right rotation of 3 index
			let newRot3letter = rot3letter < this.alphaLength() ? rot3letter : parseInt(rot3letter) - this.alphaLength();
			//Check if the 
			let output = this.alphaNumberic[newRot6letter] === this.alphaNumberic[newRot5letter] 
						&& this.alphaNumberic[newRot5letter] === this.alphaNumberic[newRot4letter] 
						&& this.alphaNumberic[newRot4letter] === this.alphaNumberic[newRot3letter] 
						&& this.alphaNumberic[newRot6letter];

			return output;
			
		});

		if(typeof decryptValue === 'string') return decryptValue;

		return decryptValue.indexOf(false) < 0 ? decryptValue.join('') : 'Either the encrypt value was not encrypt by the application or wrongly typed';


	}

	alphaLength(){
		return this.alphaNumberic.length;
	}


}

//EventListener
function cb_addEventListener(obj, evt, fnc){
    // Check if the broswer support addeventlistiner
    if (obj.addEventListener) {
        obj.addEventListener(evt, fnc, false);
    } 
     //Else Check if the broswer support attachEvent
    else if (obj.attachEvent) {
        return obj.attachEvent('on' + evt, fnc);
    }
 }

let cipher = new Cipher;

let encrypt = document.getElementById('encrypt');
let decrypt = document.getElementById('decrypt');
let sentence = document.getElementById('sentence');
let displayResult = document.getElementById('displayResult');

cb_addEventListener(encrypt, 'click', function(){
	let input = sentence.value.trim();
	let encryptValue = cipher.encrypt(input);
	cryptoFunction(input, encryptValue, 'Encrypt');
});

cb_addEventListener(decrypt, 'click', function(){
	let input = sentence.value.trim();
	let decryptValue = cipher.decrypt(input);
	cryptoFunction(input, decryptValue, 'Decrypt');
});

function cryptoFunction(input, cryptValue, cryptType){
	if(input !== ''){
		displayResult.innerHTML = `<span class="message">${cryptType} value of ${input}</span> .:: <strong>${cryptValue}</strong>`;
	}else{
		displayResult.innerHTML = `<strong>${cryptValue}</strong>`;
	}
	sentence.value = '';
}